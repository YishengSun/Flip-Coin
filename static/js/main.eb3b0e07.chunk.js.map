{"version":3,"sources":["Coin.js","Flip.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["Coin","className","src","this","props","info","url","alt","sides","Component","Flip","state","curCoin","nFlips","nHeads","nTails","flipping","bind","handleClick","arr","newCoin","coins","Math","floor","random","length","setState","curState","side","e","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAYeA,G,uLAPX,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,IAAKC,IAAMJ,KAAKC,MAAMC,KAAKG,a,GAJ1CC,c,ICCbC,E,YAaJ,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CAAEC,QAAS,KAAMC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,GAC5D,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAJF,E,wEAOjB,ICxBYE,EDwBNC,GCxBMD,EDwBWhB,KAAKC,MAAMiB,OCvBtBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,SDwB3CtB,KAAKuB,UAAS,SAAAC,GAAQ,MAAK,CACzBf,QAASQ,EACTP,OAAQc,EAASd,OAAS,EAC1BC,OAAQa,EAASb,QAA2B,UAAjBM,EAAQQ,KAAmB,EAAI,GAC1Db,OAAQY,EAASZ,QAA2B,UAAjBK,EAAQQ,KAAmB,EAAI,S,kCAIlDC,GACV1B,KAAKa,a,+BAIL,OACE,6BACGb,KAAKQ,MAAMC,SAAW,kBAAC,EAAD,CAAMP,KAAMF,KAAKQ,MAAMC,UAC9C,4BAAQkB,QAAS3B,KAAKe,aAAtB,QACA,qCACUf,KAAKQ,MAAME,OADrB,2BACqDV,KAAKQ,MAAMG,OAAQ,IADxE,aAEaX,KAAKQ,MAAMI,OAFxB,gB,GAtCWN,aAAbC,EACGqB,aAAe,CACpBV,MAAO,CACL,CACEO,KAAM,QACNtB,IAAK,iEAEP,CACEsB,KAAM,QACNtB,IAAK,mEAsCEI,Q,MEvCAsB,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCKcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb3b0e07.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Coin.css\"\n\nclass Coin extends Component {\n  render() {\n    return (\n      <div className=\"Coin\">\n        <img src={this.props.info.url} alt= {this.props.info.sides}/>\n      </div>\n    );\n  }\n}\nexport default Coin;\n","import React, { Component } from \"react\";\nimport Coin from \"./Coin\";\nimport { choice } from \"./helper\";\n\nclass Flip extends Component {\n  static defaultProps = {\n    coins: [\n      {\n        side: \"heads\",\n        url: \"https://en.numista.com/catalogue/photos/chine/19-original.jpg\"\n      },\n      {\n        side: \"tails\",\n        url: \"https://en.numista.com/catalogue/photos/chine/18-original.jpg\"\n      }\n    ]\n  };\n  constructor(props) {\n    super(props);\n    this.state = { curCoin: null, nFlips: 0, nHeads: 0, nTails: 0 };\n    this.flipping = this.flipping.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  flipping() {\n    const newCoin = choice(this.props.coins);\n    this.setState(curState => ({\n      curCoin: newCoin,\n      nFlips: curState.nFlips + 1,\n      nHeads: curState.nHeads + (newCoin.side === \"heads\" ? 1 : 0),\n      nTails: curState.nTails + (newCoin.side === \"tails\" ? 1 : 0),\n    }));\n  }\n\n  handleClick(e) {\n    this.flipping();\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.curCoin && <Coin info={this.state.curCoin} />}\n        <button onClick={this.handleClick}>Flip</button>\n        <p>\n          Out of {this.state.nFlips} flips, there have been {this.state.nHeads}{\" \"}\n          heads and {this.state.nTails} tails.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Flip;\n","function choice(arr) {\n  let randIdx = Math.floor(Math.random() * arr.length);\n  return arr[randIdx];\n}\n\nexport { choice };\n","import React from 'react';\nimport Flip from \"./Flip\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Flip />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}